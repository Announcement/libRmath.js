//https://stat.ethz.ch/R-manual/R-devel/library/stats/html/TDist.html
//https://en.wikipedia.org/wiki/Student's_t-distribution

process.env.DEBUGx = 'dnt, pnt, pbeta, seq';
const libR = require('../dist/lib/libR.js');
const {
    Normal,
    StudentT,
    rng: { MarsagliaMultiCarry },
    rng: {
        normal: { AhrensDieter }
    }
} = libR;

//some usefull helpers
const log = libR.R.arrayrify(Math.log);
const seq = libR.R.seq()();
const precision = libR.R.numberPrecision(9); //restrict to 9 significant digits

//uses default argument "Normal()"
const defaultT = StudentT();

//explicit use of PRNG's
const mmc = new MarsagliaMultiCarry(0);
const ad = new AhrensDieter(mmc);
const explicitT = StudentT(ad);

const { dt, pt, qt, rt } = explicitT;

const x = seq(-2, 2, 0.5);
//[ -2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2 ]

//1 , d.freedom=4, 
const d1 = dt(x, 4);
precision(d1);
/*[ 0.0662912607,
    0.12288,
    0.214662526,
    0.322261869,
    0.375,
    0.322261869,
    0.214662526,
    0.12288,
    0.0662912607 ]*/

//2 d.freedom=6, ncp=3 ,  asLog=true
const d2 = dt(x, 6, 3, true);
precision(d2);
/*[ -11.3338746,
  -10.0457558,
  -8.60952363,
  -7.05283449,
  -5.46041826,
  -3.98130184,
  -2.77195465,
  -1.92218557,
  -1.4276455 ]*/

//3  df=40, ncp=0 (undefined also works), asLog=true
const d3 = dt(x, 40, 0, true);
precision(d3);
/*[ -2.87904657,
  -2.04704833,
  -1.43138644,
  -1.05291415,
  -0.925187883,
  -1.05291415,
  -1.43138644,
  -2.04704833,
  -2.87904657 ]*/



//1
const p1 = pt(x, 4);
precision(p1);
/*
[ 0.0580582573, 0.103999986, 0.186950444,
  0.321664726,  0.5,         0.678335274,
  0.813049556,  0.896000014  0.941941743 ]
  */
/*
>
pt(x, 4);
[1] 0.0580582618 0.1040000000 0.1869504832 0.3216649816 0.5000000000
    [6] 0.6783350184 0.8130495168 0.8960000000 0.9419417382 *
    /
*/
//2
const p2 = pt(x, 6, 3);
precision(p2);
/*
[ 0.00000552398055, 0.0000175658822, 0.000065386889,
  0.000282969478,   0.00134989803,   0.00630091821,
  0.0249440265,     0.0757615575,    0.173007342 ]*/
/*
>
>
pt(x, 6, 3, TRUE);
[1] 0.0000055286975 0.0000175810923 0.0000654462028 0.0002832948346
    [5] 0.0013498980316 0.0063005928526 0.0249439672347 0.0757615423360[9] 0.1730073377405 *
    /
*/
//3
const p3 = pt(x, 40, 0, true, true);
precision(p3);
/*
[ -3.64347931, -2.64883812,   -1.82225529,
  -1.17148473, -0.693147181,  -0.370928141,
  -0.176332425,-0.0733595514, -0.0265094536 ]*/

/*  
> pt(x, 40, 0, TRUE, TRUE)
[1] -3.6434789672 -2.6488375624 -1.8222543111 -1.1714818403 -0.6931471806
[6] -0.3709294406 -0.1763326134 -0.0733595937 -0.0265094630
*/


//1
const pp1 = pt(x, 4);
const q1 = qt(pp1, 4);
precision(q1);
//[ -2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2 ]

//2  
const pp2 = pt(x, 6, 3);
const q2 = qt(pp2, 6, 3);
precision(q2);
//[ -2, -1.5, -1, -0.5, 4.15840085e-162, 0.5, 1, 1.5, 2 ] 
/*
> options(scipen=9)
> qt(pp2, 6, 3)
[1] -2.00000000e+00 -1.50000000e+00 -1.00000000e+00 -5.00000000e-01
[5]  2.54875259e-17  5.00000000e-01  1.00000000e+00  1.50000000e+00
[9]  2.00000000e+00
*/

//3
const pp3 = pt(x, 40, 0, true, true);
const q3 = qt(pp3, 40, 0, true, true);
precision(q3);
//[ -2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2 ]

/*
> pp3 = pt(x, 40, 0, TRUE, TRUE)
> qt(pp3, 40, 0, TRUE, TRUE)
[1] -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0
*/

//1
mmc.init(1234);
const r1 = rt(5, 4);
precision(r1);
//[ 0.0231141364, 0.636030741, -0.9389398, 1.89196546, -1.9002538 ]

//2
mmc.init(4345);
const r2 = rt(5, 11, 3);
precision(r2);
//[ 4.82388236, 7.39995919, 16.9449549, 9.30852366, 13.450456 ]

//3
mmc.init(9876);
const r3 = rt(5, 26, -16);
precision(r3);

/*
> rt(5, 26, -16);
[1] -14.6668570 -14.4664293 -17.9397007 -17.0650828 -19.7422692
*/
/*
RNGkind("Marsaglia-Multicarry",normal.kind="Ahrens-Dieter")
options(scipen=999)
options(digits=9)

#1.
set.seed(1234);
rt(5, 4);
[1]  0.0231141364  0.6360307414 -0.9389397997  1.8919654608 -1.9002537980

#2
set.seed(4345);
rt(5, 11, 3);
[1] 1.45445526 2.23117165 5.10909613 2.80662548 4.05546509

#3
> set.seed(9876)
> rt(5, 26, -16);
[1] -14.6668570 -14.4664293 -17.9397007 -17.0650828 -19.7422692

*/
/*
[1]  0.3947947360 -0.0398241623 -0.1989612842  0.5759506097  1.5455732771
[1]  0.493346381  0.397900424 -0.461189755 -1.715106227 -0.193161600
[1] 2.183461187 2.043946921 0.737266568 2.156077310 2.580468935
[1]  0.414283127  0.455700109 -0.425930423 -1.053189196 -0.192320834
[1] 1.45445526 2.23117165 5.10909613 2.80662548 4.05546509
*/